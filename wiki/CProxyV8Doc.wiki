#summary More detailed documentation

= Methods/Properties in C++ class - Take Note =

   C++
   {{{
      class A
      {
      public:
        Type b;   //ok
        Type* b2; //WARNNING: GC will try to delete this if it is exposed
        
        primitive p; //ok
   
       // If type is a class type:
   
         Type* getPointer(); //Type must have a CProxyV8<Type> representation
         Type& getReference(); //Type must have a CProxyV8<Type> representation
   
         Type  getStackReference(); //do not Expose this, it will provoke invalid mem ref.
   
      // If type is a basic type like int:
         Type  getStackReference(); //this is ok.
      };
   }}}

   *_Return values_
       If Type is a *class* it must have a CProxyV8<Type> representation. It must be declared as CPROXYV8_CLASS(class) called somewhere.

       *Type - This make a V8 wrapper for the object, 
               and it will be destroy by the GC
{{{
               Type* getPointer() { return new Type(); }; //OK, obj will be destroy by GC
               Type* getPointer() { return &t;    }; //Error: GC will try to dispose this
}}}

       *Type& - This make a V8 wrapper for the object, 
               it will be not destroy by GC
{{{
               Type& getPointer() { return new Type(); }; //Error: memory leak
               Type& getPointer() { return &t;    }; //Ok: GC will NOT try to dispose this
}}}

       *Type  - If type is a Class:
               This make a V8 wrapper for the object in the stack 
               and will be invalid  as soon as the V8 call ends. 
               DO NOT USE IT FOR CLASSES
               
               If type is primitive:
               primitive value like int, bool, double, etc are OK


= Handy macros =
Everything accessed with the following macros.

*Macro parameters*:
      * CLASS: the name of the class in C++
      * PROPERTY: the name of the property in C++
      * METHOD: the name of the method in C++
      * ID: the name for JS
      * GET: true/false true allow the value of the property to used in JS
      * SET: true/false true allow the value change from JS

Macros whit ID parameter allow the programmer to change the name of the class, property or method in Java Script.

==Expose a classes to JS==
  ===CPROXYV8_CLASS(class)===

         C++
         {{{
           ProxyClass<Point>* cPoint = PROXY_CLASS(Point);
         }}}
         Java Script
         {{{
           x = new Point();
         }}}

  ===CPROXYV8_CLASS_ID(class,ID)===

         C++
         {{{
           ProxyClass<Point>* cPoint = PROXY_CLASS(Point,XY);
         }}}
         Java Script
         {{{
           x = new XY();
         }}}

==Expose a property class to JS==
  ===CPROXYV8_PROPERTY(class, property, get, set);===

         C++
         {{{
           CPROXYV8_PROPERTY(Point, x, true, true);
         }}}
         Java Script
         {{{
           p = new Point();
           p.x = p.x + 10
         }}}

  ===CPROXYV8_PROPERTY_ID(class, property, id, get, set);===

         C++
         {{{
           CPROXYV8_PROPERTY(Point, equis, x, true, true);
         }}}
         Java Script
         {{{
           p = new Point();
           p.x = p.x + 10
         }}}

==Expose a method class to JS==
  ===CPROXYV8_METHOD(class, method);===

         C++
         {{{
           CPROXYV8_METHOD(Point, Translate);
         }}}
         Java Script
         {{{
           p = new Point();
           p.Translate(10,10);
         }}}

  ===CPROXYV8_METHOD_ID(class, method, id);===

         C++
         {{{
           CPROXYV8_PROPERTY(Point, Translate, translate);
         }}}
         Java Script
         {{{
           p = new Point();
           p.translate(10,10);
         }}}